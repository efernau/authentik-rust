/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// PatchedScopeMappingRequest : ScopeMapping Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedScopeMappingRequest {
    /// Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    #[serde(rename = "managed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub managed: Option<Option<String>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "expression", skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// Scope name requested by the client
    #[serde(rename = "scope_name", skip_serializing_if = "Option::is_none")]
    pub scope_name: Option<String>,
    /// Description shown to the user when consenting. If left empty, the user won't be informed.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl PatchedScopeMappingRequest {
    /// ScopeMapping Serializer
    pub fn new() -> PatchedScopeMappingRequest {
        PatchedScopeMappingRequest {
            managed: None,
            name: None,
            expression: None,
            scope_name: None,
            description: None,
        }
    }
}


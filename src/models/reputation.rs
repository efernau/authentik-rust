/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Reputation : Reputation Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Reputation {
    #[serde(rename = "pk", skip_serializing_if = "Option::is_none")]
    pub pk: Option<uuid::Uuid>,
    #[serde(rename = "identifier")]
    pub identifier: String,
    #[serde(rename = "ip")]
    pub ip: String,
    #[serde(rename = "ip_geo_data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ip_geo_data: Option<Option<serde_json::Value>>,
    #[serde(rename = "ip_asn_data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ip_asn_data: Option<Option<serde_json::Value>>,
    #[serde(rename = "score", skip_serializing_if = "Option::is_none")]
    pub score: Option<i64>,
    #[serde(rename = "updated")]
    pub updated: String,
}

impl Reputation {
    /// Reputation Serializer
    pub fn new(identifier: String, ip: String, updated: String) -> Reputation {
        Reputation {
            pk: None,
            identifier,
            ip,
            ip_geo_data: None,
            ip_asn_data: None,
            score: None,
            updated,
        }
    }
}


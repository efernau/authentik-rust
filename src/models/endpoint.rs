/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// Endpoint : Endpoint Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Endpoint {
    #[serde(rename = "pk")]
    pub pk: uuid::Uuid,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "provider")]
    pub provider: i32,
    #[serde(rename = "provider_obj")]
    pub provider_obj: Box<models::RacProvider>,
    #[serde(rename = "protocol")]
    pub protocol: models::ProtocolEnum,
    #[serde(rename = "host")]
    pub host: String,
    #[serde(rename = "settings", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub settings: Option<Option<serde_json::Value>>,
    #[serde(rename = "property_mappings", skip_serializing_if = "Option::is_none")]
    pub property_mappings: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "auth_mode")]
    pub auth_mode: models::AuthModeEnum,
    /// Build actual launch URL (the provider itself does not have one, just individual endpoints)
    #[serde(rename = "launch_url", deserialize_with = "Option::deserialize")]
    pub launch_url: Option<String>,
    #[serde(rename = "maximum_connections", skip_serializing_if = "Option::is_none")]
    pub maximum_connections: Option<i32>,
}

impl Endpoint {
    /// Endpoint Serializer
    pub fn new(pk: uuid::Uuid, name: String, provider: i32, provider_obj: models::RacProvider, protocol: models::ProtocolEnum, host: String, auth_mode: models::AuthModeEnum, launch_url: Option<String>) -> Endpoint {
        Endpoint {
            pk,
            name,
            provider,
            provider_obj: Box::new(provider_obj),
            protocol,
            host,
            settings: None,
            property_mappings: None,
            auth_mode,
            launch_url,
            maximum_connections: None,
        }
    }
}


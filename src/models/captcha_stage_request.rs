/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// CaptchaStageRequest : CaptchaStage Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CaptchaStageRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "flow_set", skip_serializing_if = "Option::is_none")]
    pub flow_set: Option<Vec<models::FlowSetRequest>>,
    /// Public key, acquired your captcha Provider.
    #[serde(rename = "public_key")]
    pub public_key: String,
    /// Private key, acquired your captcha Provider.
    #[serde(rename = "private_key")]
    pub private_key: String,
    #[serde(rename = "js_url", skip_serializing_if = "Option::is_none")]
    pub js_url: Option<String>,
    #[serde(rename = "api_url", skip_serializing_if = "Option::is_none")]
    pub api_url: Option<String>,
}

impl CaptchaStageRequest {
    /// CaptchaStage Serializer
    pub fn new(name: String, public_key: String, private_key: String) -> CaptchaStageRequest {
        CaptchaStageRequest {
            name,
            flow_set: None,
            public_key,
            private_key,
            js_url: None,
            api_url: None,
        }
    }
}


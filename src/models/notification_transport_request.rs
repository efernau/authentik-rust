/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// NotificationTransportRequest : NotificationTransport Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationTransportRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<models::NotificationTransportModeEnum>,
    #[serde(rename = "webhook_url", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
    #[serde(rename = "webhook_mapping", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub webhook_mapping: Option<Option<uuid::Uuid>>,
    /// Only send notification once, for example when sending a webhook into a chat channel.
    #[serde(rename = "send_once", skip_serializing_if = "Option::is_none")]
    pub send_once: Option<bool>,
}

impl NotificationTransportRequest {
    /// NotificationTransport Serializer
    pub fn new(name: String) -> NotificationTransportRequest {
        NotificationTransportRequest {
            name,
            mode: None,
            webhook_url: None,
            webhook_mapping: None,
            send_once: None,
        }
    }
}


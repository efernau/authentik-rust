/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// EndpointRequest : Endpoint Serializer
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EndpointRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "provider")]
    pub provider: i32,
    #[serde(rename = "protocol")]
    pub protocol: models::ProtocolEnum,
    #[serde(rename = "host")]
    pub host: String,
    #[serde(rename = "settings", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub settings: Option<Option<serde_json::Value>>,
    #[serde(rename = "property_mappings", skip_serializing_if = "Option::is_none")]
    pub property_mappings: Option<Vec<uuid::Uuid>>,
    #[serde(rename = "auth_mode")]
    pub auth_mode: models::AuthModeEnum,
    #[serde(rename = "maximum_connections", skip_serializing_if = "Option::is_none")]
    pub maximum_connections: Option<i32>,
}

impl EndpointRequest {
    /// Endpoint Serializer
    pub fn new(name: String, provider: i32, protocol: models::ProtocolEnum, host: String, auth_mode: models::AuthModeEnum) -> EndpointRequest {
        EndpointRequest {
            name,
            provider,
            protocol,
            host,
            settings: None,
            property_mappings: None,
            auth_mode,
            maximum_connections: None,
        }
    }
}


/*
 * authentik
 *
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ModelEnum : * `authentik_tenants.domain` - Domain * `authentik_crypto.certificatekeypair` - Certificate-Key Pair * `authentik_flows.flow` - Flow * `authentik_flows.flowstagebinding` - Flow Stage Binding * `authentik_outposts.dockerserviceconnection` - Docker Service-Connection * `authentik_outposts.kubernetesserviceconnection` - Kubernetes Service-Connection * `authentik_outposts.outpost` - Outpost * `authentik_policies_dummy.dummypolicy` - Dummy Policy * `authentik_policies_event_matcher.eventmatcherpolicy` - Event Matcher Policy * `authentik_policies_expiry.passwordexpirypolicy` - Password Expiry Policy * `authentik_policies_expression.expressionpolicy` - Expression Policy * `authentik_policies_password.passwordpolicy` - Password Policy * `authentik_policies_reputation.reputationpolicy` - Reputation Policy * `authentik_policies.policybinding` - Policy Binding * `authentik_providers_ldap.ldapprovider` - LDAP Provider * `authentik_providers_oauth2.scopemapping` - Scope Mapping * `authentik_providers_oauth2.oauth2provider` - OAuth2/OpenID Provider * `authentik_providers_proxy.proxyprovider` - Proxy Provider * `authentik_providers_radius.radiusprovider` - Radius Provider * `authentik_providers_saml.samlprovider` - SAML Provider * `authentik_providers_saml.samlpropertymapping` - SAML Property Mapping * `authentik_providers_scim.scimprovider` - SCIM Provider * `authentik_providers_scim.scimmapping` - SCIM Mapping * `authentik_rbac.role` - Role * `authentik_sources_ldap.ldapsource` - LDAP Source * `authentik_sources_ldap.ldappropertymapping` - LDAP Property Mapping * `authentik_sources_oauth.oauthsource` - OAuth Source * `authentik_sources_oauth.useroauthsourceconnection` - User OAuth Source Connection * `authentik_sources_plex.plexsource` - Plex Source * `authentik_sources_plex.plexsourceconnection` - User Plex Source Connection * `authentik_sources_saml.samlsource` - SAML Source * `authentik_sources_saml.usersamlsourceconnection` - User SAML Source Connection * `authentik_stages_authenticator_duo.authenticatorduostage` - Duo Authenticator Setup Stage * `authentik_stages_authenticator_duo.duodevice` - Duo Device * `authentik_stages_authenticator_sms.authenticatorsmsstage` - SMS Authenticator Setup Stage * `authentik_stages_authenticator_sms.smsdevice` - SMS Device * `authentik_stages_authenticator_static.authenticatorstaticstage` - Static Authenticator Setup Stage * `authentik_stages_authenticator_static.staticdevice` - Static Device * `authentik_stages_authenticator_totp.authenticatortotpstage` - TOTP Authenticator Setup Stage * `authentik_stages_authenticator_totp.totpdevice` - TOTP Device * `authentik_stages_authenticator_validate.authenticatorvalidatestage` - Authenticator Validation Stage * `authentik_stages_authenticator_webauthn.authenticatewebauthnstage` - WebAuthn Authenticator Setup Stage * `authentik_stages_authenticator_webauthn.webauthndevice` - WebAuthn Device * `authentik_stages_captcha.captchastage` - Captcha Stage * `authentik_stages_consent.consentstage` - Consent Stage * `authentik_stages_consent.userconsent` - User Consent * `authentik_stages_deny.denystage` - Deny Stage * `authentik_stages_dummy.dummystage` - Dummy Stage * `authentik_stages_email.emailstage` - Email Stage * `authentik_stages_identification.identificationstage` - Identification Stage * `authentik_stages_invitation.invitationstage` - Invitation Stage * `authentik_stages_invitation.invitation` - Invitation * `authentik_stages_password.passwordstage` - Password Stage * `authentik_stages_prompt.prompt` - Prompt * `authentik_stages_prompt.promptstage` - Prompt Stage * `authentik_stages_user_delete.userdeletestage` - User Delete Stage * `authentik_stages_user_login.userloginstage` - User Login Stage * `authentik_stages_user_logout.userlogoutstage` - User Logout Stage * `authentik_stages_user_write.userwritestage` - User Write Stage * `authentik_brands.brand` - Brand * `authentik_blueprints.blueprintinstance` - Blueprint Instance * `authentik_core.group` - Group * `authentik_core.user` - User * `authentik_core.application` - Application * `authentik_core.token` - Token * `authentik_enterprise.license` - License * `authentik_providers_rac.racprovider` - RAC Provider * `authentik_providers_rac.endpoint` - RAC Endpoint * `authentik_providers_rac.racpropertymapping` - RAC Property Mapping * `authentik_events.event` - Event * `authentik_events.notificationtransport` - Notification Transport * `authentik_events.notification` - Notification * `authentik_events.notificationrule` - Notification Rule * `authentik_events.notificationwebhookmapping` - Webhook Mapping
/// * `authentik_tenants.domain` - Domain * `authentik_crypto.certificatekeypair` - Certificate-Key Pair * `authentik_flows.flow` - Flow * `authentik_flows.flowstagebinding` - Flow Stage Binding * `authentik_outposts.dockerserviceconnection` - Docker Service-Connection * `authentik_outposts.kubernetesserviceconnection` - Kubernetes Service-Connection * `authentik_outposts.outpost` - Outpost * `authentik_policies_dummy.dummypolicy` - Dummy Policy * `authentik_policies_event_matcher.eventmatcherpolicy` - Event Matcher Policy * `authentik_policies_expiry.passwordexpirypolicy` - Password Expiry Policy * `authentik_policies_expression.expressionpolicy` - Expression Policy * `authentik_policies_password.passwordpolicy` - Password Policy * `authentik_policies_reputation.reputationpolicy` - Reputation Policy * `authentik_policies.policybinding` - Policy Binding * `authentik_providers_ldap.ldapprovider` - LDAP Provider * `authentik_providers_oauth2.scopemapping` - Scope Mapping * `authentik_providers_oauth2.oauth2provider` - OAuth2/OpenID Provider * `authentik_providers_proxy.proxyprovider` - Proxy Provider * `authentik_providers_radius.radiusprovider` - Radius Provider * `authentik_providers_saml.samlprovider` - SAML Provider * `authentik_providers_saml.samlpropertymapping` - SAML Property Mapping * `authentik_providers_scim.scimprovider` - SCIM Provider * `authentik_providers_scim.scimmapping` - SCIM Mapping * `authentik_rbac.role` - Role * `authentik_sources_ldap.ldapsource` - LDAP Source * `authentik_sources_ldap.ldappropertymapping` - LDAP Property Mapping * `authentik_sources_oauth.oauthsource` - OAuth Source * `authentik_sources_oauth.useroauthsourceconnection` - User OAuth Source Connection * `authentik_sources_plex.plexsource` - Plex Source * `authentik_sources_plex.plexsourceconnection` - User Plex Source Connection * `authentik_sources_saml.samlsource` - SAML Source * `authentik_sources_saml.usersamlsourceconnection` - User SAML Source Connection * `authentik_stages_authenticator_duo.authenticatorduostage` - Duo Authenticator Setup Stage * `authentik_stages_authenticator_duo.duodevice` - Duo Device * `authentik_stages_authenticator_sms.authenticatorsmsstage` - SMS Authenticator Setup Stage * `authentik_stages_authenticator_sms.smsdevice` - SMS Device * `authentik_stages_authenticator_static.authenticatorstaticstage` - Static Authenticator Setup Stage * `authentik_stages_authenticator_static.staticdevice` - Static Device * `authentik_stages_authenticator_totp.authenticatortotpstage` - TOTP Authenticator Setup Stage * `authentik_stages_authenticator_totp.totpdevice` - TOTP Device * `authentik_stages_authenticator_validate.authenticatorvalidatestage` - Authenticator Validation Stage * `authentik_stages_authenticator_webauthn.authenticatewebauthnstage` - WebAuthn Authenticator Setup Stage * `authentik_stages_authenticator_webauthn.webauthndevice` - WebAuthn Device * `authentik_stages_captcha.captchastage` - Captcha Stage * `authentik_stages_consent.consentstage` - Consent Stage * `authentik_stages_consent.userconsent` - User Consent * `authentik_stages_deny.denystage` - Deny Stage * `authentik_stages_dummy.dummystage` - Dummy Stage * `authentik_stages_email.emailstage` - Email Stage * `authentik_stages_identification.identificationstage` - Identification Stage * `authentik_stages_invitation.invitationstage` - Invitation Stage * `authentik_stages_invitation.invitation` - Invitation * `authentik_stages_password.passwordstage` - Password Stage * `authentik_stages_prompt.prompt` - Prompt * `authentik_stages_prompt.promptstage` - Prompt Stage * `authentik_stages_user_delete.userdeletestage` - User Delete Stage * `authentik_stages_user_login.userloginstage` - User Login Stage * `authentik_stages_user_logout.userlogoutstage` - User Logout Stage * `authentik_stages_user_write.userwritestage` - User Write Stage * `authentik_brands.brand` - Brand * `authentik_blueprints.blueprintinstance` - Blueprint Instance * `authentik_core.group` - Group * `authentik_core.user` - User * `authentik_core.application` - Application * `authentik_core.token` - Token * `authentik_enterprise.license` - License * `authentik_providers_rac.racprovider` - RAC Provider * `authentik_providers_rac.endpoint` - RAC Endpoint * `authentik_providers_rac.racpropertymapping` - RAC Property Mapping * `authentik_events.event` - Event * `authentik_events.notificationtransport` - Notification Transport * `authentik_events.notification` - Notification * `authentik_events.notificationrule` - Notification Rule * `authentik_events.notificationwebhookmapping` - Webhook Mapping
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ModelEnum {
    #[serde(rename = "authentik_tenants.domain")]
    TenantsPeriodDomain,
    #[serde(rename = "authentik_crypto.certificatekeypair")]
    CryptoPeriodCertificatekeypair,
    #[serde(rename = "authentik_flows.flow")]
    FlowsPeriodFlow,
    #[serde(rename = "authentik_flows.flowstagebinding")]
    FlowsPeriodFlowstagebinding,
    #[serde(rename = "authentik_outposts.dockerserviceconnection")]
    OutpostsPeriodDockerserviceconnection,
    #[serde(rename = "authentik_outposts.kubernetesserviceconnection")]
    OutpostsPeriodKubernetesserviceconnection,
    #[serde(rename = "authentik_outposts.outpost")]
    OutpostsPeriodOutpost,
    #[serde(rename = "authentik_policies_dummy.dummypolicy")]
    PoliciesDummyPeriodDummypolicy,
    #[serde(rename = "authentik_policies_event_matcher.eventmatcherpolicy")]
    PoliciesEventMatcherPeriodEventmatcherpolicy,
    #[serde(rename = "authentik_policies_expiry.passwordexpirypolicy")]
    PoliciesExpiryPeriodPasswordexpirypolicy,
    #[serde(rename = "authentik_policies_expression.expressionpolicy")]
    PoliciesExpressionPeriodExpressionpolicy,
    #[serde(rename = "authentik_policies_password.passwordpolicy")]
    PoliciesPasswordPeriodPasswordpolicy,
    #[serde(rename = "authentik_policies_reputation.reputationpolicy")]
    PoliciesReputationPeriodReputationpolicy,
    #[serde(rename = "authentik_policies.policybinding")]
    PoliciesPeriodPolicybinding,
    #[serde(rename = "authentik_providers_ldap.ldapprovider")]
    ProvidersLdapPeriodLdapprovider,
    #[serde(rename = "authentik_providers_oauth2.scopemapping")]
    ProvidersOauth2PeriodScopemapping,
    #[serde(rename = "authentik_providers_oauth2.oauth2provider")]
    ProvidersOauth2PeriodOauth2provider,
    #[serde(rename = "authentik_providers_proxy.proxyprovider")]
    ProvidersProxyPeriodProxyprovider,
    #[serde(rename = "authentik_providers_radius.radiusprovider")]
    ProvidersRadiusPeriodRadiusprovider,
    #[serde(rename = "authentik_providers_saml.samlprovider")]
    ProvidersSamlPeriodSamlprovider,
    #[serde(rename = "authentik_providers_saml.samlpropertymapping")]
    ProvidersSamlPeriodSamlpropertymapping,
    #[serde(rename = "authentik_providers_scim.scimprovider")]
    ProvidersScimPeriodScimprovider,
    #[serde(rename = "authentik_providers_scim.scimmapping")]
    ProvidersScimPeriodScimmapping,
    #[serde(rename = "authentik_rbac.role")]
    RbacPeriodRole,
    #[serde(rename = "authentik_sources_ldap.ldapsource")]
    SourcesLdapPeriodLdapsource,
    #[serde(rename = "authentik_sources_ldap.ldappropertymapping")]
    SourcesLdapPeriodLdappropertymapping,
    #[serde(rename = "authentik_sources_oauth.oauthsource")]
    SourcesOauthPeriodOauthsource,
    #[serde(rename = "authentik_sources_oauth.useroauthsourceconnection")]
    SourcesOauthPeriodUseroauthsourceconnection,
    #[serde(rename = "authentik_sources_plex.plexsource")]
    SourcesPlexPeriodPlexsource,
    #[serde(rename = "authentik_sources_plex.plexsourceconnection")]
    SourcesPlexPeriodPlexsourceconnection,
    #[serde(rename = "authentik_sources_saml.samlsource")]
    SourcesSamlPeriodSamlsource,
    #[serde(rename = "authentik_sources_saml.usersamlsourceconnection")]
    SourcesSamlPeriodUsersamlsourceconnection,
    #[serde(rename = "authentik_stages_authenticator_duo.authenticatorduostage")]
    StagesAuthenticatorDuoPeriodAuthenticatorduostage,
    #[serde(rename = "authentik_stages_authenticator_duo.duodevice")]
    StagesAuthenticatorDuoPeriodDuodevice,
    #[serde(rename = "authentik_stages_authenticator_sms.authenticatorsmsstage")]
    StagesAuthenticatorSmsPeriodAuthenticatorsmsstage,
    #[serde(rename = "authentik_stages_authenticator_sms.smsdevice")]
    StagesAuthenticatorSmsPeriodSmsdevice,
    #[serde(rename = "authentik_stages_authenticator_static.authenticatorstaticstage")]
    StagesAuthenticatorStaticPeriodAuthenticatorstaticstage,
    #[serde(rename = "authentik_stages_authenticator_static.staticdevice")]
    StagesAuthenticatorStaticPeriodStaticdevice,
    #[serde(rename = "authentik_stages_authenticator_totp.authenticatortotpstage")]
    StagesAuthenticatorTotpPeriodAuthenticatortotpstage,
    #[serde(rename = "authentik_stages_authenticator_totp.totpdevice")]
    StagesAuthenticatorTotpPeriodTotpdevice,
    #[serde(rename = "authentik_stages_authenticator_validate.authenticatorvalidatestage")]
    StagesAuthenticatorValidatePeriodAuthenticatorvalidatestage,
    #[serde(rename = "authentik_stages_authenticator_webauthn.authenticatewebauthnstage")]
    StagesAuthenticatorWebauthnPeriodAuthenticatewebauthnstage,
    #[serde(rename = "authentik_stages_authenticator_webauthn.webauthndevice")]
    StagesAuthenticatorWebauthnPeriodWebauthndevice,
    #[serde(rename = "authentik_stages_captcha.captchastage")]
    StagesCaptchaPeriodCaptchastage,
    #[serde(rename = "authentik_stages_consent.consentstage")]
    StagesConsentPeriodConsentstage,
    #[serde(rename = "authentik_stages_consent.userconsent")]
    StagesConsentPeriodUserconsent,
    #[serde(rename = "authentik_stages_deny.denystage")]
    StagesDenyPeriodDenystage,
    #[serde(rename = "authentik_stages_dummy.dummystage")]
    StagesDummyPeriodDummystage,
    #[serde(rename = "authentik_stages_email.emailstage")]
    StagesEmailPeriodEmailstage,
    #[serde(rename = "authentik_stages_identification.identificationstage")]
    StagesIdentificationPeriodIdentificationstage,
    #[serde(rename = "authentik_stages_invitation.invitationstage")]
    StagesInvitationPeriodInvitationstage,
    #[serde(rename = "authentik_stages_invitation.invitation")]
    StagesInvitationPeriodInvitation,
    #[serde(rename = "authentik_stages_password.passwordstage")]
    StagesPasswordPeriodPasswordstage,
    #[serde(rename = "authentik_stages_prompt.prompt")]
    StagesPromptPeriodPrompt,
    #[serde(rename = "authentik_stages_prompt.promptstage")]
    StagesPromptPeriodPromptstage,
    #[serde(rename = "authentik_stages_user_delete.userdeletestage")]
    StagesUserDeletePeriodUserdeletestage,
    #[serde(rename = "authentik_stages_user_login.userloginstage")]
    StagesUserLoginPeriodUserloginstage,
    #[serde(rename = "authentik_stages_user_logout.userlogoutstage")]
    StagesUserLogoutPeriodUserlogoutstage,
    #[serde(rename = "authentik_stages_user_write.userwritestage")]
    StagesUserWritePeriodUserwritestage,
    #[serde(rename = "authentik_brands.brand")]
    BrandsPeriodBrand,
    #[serde(rename = "authentik_blueprints.blueprintinstance")]
    BlueprintsPeriodBlueprintinstance,
    #[serde(rename = "authentik_core.group")]
    CorePeriodGroup,
    #[serde(rename = "authentik_core.user")]
    CorePeriodUser,
    #[serde(rename = "authentik_core.application")]
    CorePeriodApplication,
    #[serde(rename = "authentik_core.token")]
    CorePeriodToken,
    #[serde(rename = "authentik_enterprise.license")]
    EnterprisePeriodLicense,
    #[serde(rename = "authentik_providers_rac.racprovider")]
    ProvidersRacPeriodRacprovider,
    #[serde(rename = "authentik_providers_rac.endpoint")]
    ProvidersRacPeriodEndpoint,
    #[serde(rename = "authentik_providers_rac.racpropertymapping")]
    ProvidersRacPeriodRacpropertymapping,
    #[serde(rename = "authentik_events.event")]
    EventsPeriodEvent,
    #[serde(rename = "authentik_events.notificationtransport")]
    EventsPeriodNotificationtransport,
    #[serde(rename = "authentik_events.notification")]
    EventsPeriodNotification,
    #[serde(rename = "authentik_events.notificationrule")]
    EventsPeriodNotificationrule,
    #[serde(rename = "authentik_events.notificationwebhookmapping")]
    EventsPeriodNotificationwebhookmapping,

}

impl ToString for ModelEnum {
    fn to_string(&self) -> String {
        match self {
            Self::TenantsPeriodDomain => String::from("authentik_tenants.domain"),
            Self::CryptoPeriodCertificatekeypair => String::from("authentik_crypto.certificatekeypair"),
            Self::FlowsPeriodFlow => String::from("authentik_flows.flow"),
            Self::FlowsPeriodFlowstagebinding => String::from("authentik_flows.flowstagebinding"),
            Self::OutpostsPeriodDockerserviceconnection => String::from("authentik_outposts.dockerserviceconnection"),
            Self::OutpostsPeriodKubernetesserviceconnection => String::from("authentik_outposts.kubernetesserviceconnection"),
            Self::OutpostsPeriodOutpost => String::from("authentik_outposts.outpost"),
            Self::PoliciesDummyPeriodDummypolicy => String::from("authentik_policies_dummy.dummypolicy"),
            Self::PoliciesEventMatcherPeriodEventmatcherpolicy => String::from("authentik_policies_event_matcher.eventmatcherpolicy"),
            Self::PoliciesExpiryPeriodPasswordexpirypolicy => String::from("authentik_policies_expiry.passwordexpirypolicy"),
            Self::PoliciesExpressionPeriodExpressionpolicy => String::from("authentik_policies_expression.expressionpolicy"),
            Self::PoliciesPasswordPeriodPasswordpolicy => String::from("authentik_policies_password.passwordpolicy"),
            Self::PoliciesReputationPeriodReputationpolicy => String::from("authentik_policies_reputation.reputationpolicy"),
            Self::PoliciesPeriodPolicybinding => String::from("authentik_policies.policybinding"),
            Self::ProvidersLdapPeriodLdapprovider => String::from("authentik_providers_ldap.ldapprovider"),
            Self::ProvidersOauth2PeriodScopemapping => String::from("authentik_providers_oauth2.scopemapping"),
            Self::ProvidersOauth2PeriodOauth2provider => String::from("authentik_providers_oauth2.oauth2provider"),
            Self::ProvidersProxyPeriodProxyprovider => String::from("authentik_providers_proxy.proxyprovider"),
            Self::ProvidersRadiusPeriodRadiusprovider => String::from("authentik_providers_radius.radiusprovider"),
            Self::ProvidersSamlPeriodSamlprovider => String::from("authentik_providers_saml.samlprovider"),
            Self::ProvidersSamlPeriodSamlpropertymapping => String::from("authentik_providers_saml.samlpropertymapping"),
            Self::ProvidersScimPeriodScimprovider => String::from("authentik_providers_scim.scimprovider"),
            Self::ProvidersScimPeriodScimmapping => String::from("authentik_providers_scim.scimmapping"),
            Self::RbacPeriodRole => String::from("authentik_rbac.role"),
            Self::SourcesLdapPeriodLdapsource => String::from("authentik_sources_ldap.ldapsource"),
            Self::SourcesLdapPeriodLdappropertymapping => String::from("authentik_sources_ldap.ldappropertymapping"),
            Self::SourcesOauthPeriodOauthsource => String::from("authentik_sources_oauth.oauthsource"),
            Self::SourcesOauthPeriodUseroauthsourceconnection => String::from("authentik_sources_oauth.useroauthsourceconnection"),
            Self::SourcesPlexPeriodPlexsource => String::from("authentik_sources_plex.plexsource"),
            Self::SourcesPlexPeriodPlexsourceconnection => String::from("authentik_sources_plex.plexsourceconnection"),
            Self::SourcesSamlPeriodSamlsource => String::from("authentik_sources_saml.samlsource"),
            Self::SourcesSamlPeriodUsersamlsourceconnection => String::from("authentik_sources_saml.usersamlsourceconnection"),
            Self::StagesAuthenticatorDuoPeriodAuthenticatorduostage => String::from("authentik_stages_authenticator_duo.authenticatorduostage"),
            Self::StagesAuthenticatorDuoPeriodDuodevice => String::from("authentik_stages_authenticator_duo.duodevice"),
            Self::StagesAuthenticatorSmsPeriodAuthenticatorsmsstage => String::from("authentik_stages_authenticator_sms.authenticatorsmsstage"),
            Self::StagesAuthenticatorSmsPeriodSmsdevice => String::from("authentik_stages_authenticator_sms.smsdevice"),
            Self::StagesAuthenticatorStaticPeriodAuthenticatorstaticstage => String::from("authentik_stages_authenticator_static.authenticatorstaticstage"),
            Self::StagesAuthenticatorStaticPeriodStaticdevice => String::from("authentik_stages_authenticator_static.staticdevice"),
            Self::StagesAuthenticatorTotpPeriodAuthenticatortotpstage => String::from("authentik_stages_authenticator_totp.authenticatortotpstage"),
            Self::StagesAuthenticatorTotpPeriodTotpdevice => String::from("authentik_stages_authenticator_totp.totpdevice"),
            Self::StagesAuthenticatorValidatePeriodAuthenticatorvalidatestage => String::from("authentik_stages_authenticator_validate.authenticatorvalidatestage"),
            Self::StagesAuthenticatorWebauthnPeriodAuthenticatewebauthnstage => String::from("authentik_stages_authenticator_webauthn.authenticatewebauthnstage"),
            Self::StagesAuthenticatorWebauthnPeriodWebauthndevice => String::from("authentik_stages_authenticator_webauthn.webauthndevice"),
            Self::StagesCaptchaPeriodCaptchastage => String::from("authentik_stages_captcha.captchastage"),
            Self::StagesConsentPeriodConsentstage => String::from("authentik_stages_consent.consentstage"),
            Self::StagesConsentPeriodUserconsent => String::from("authentik_stages_consent.userconsent"),
            Self::StagesDenyPeriodDenystage => String::from("authentik_stages_deny.denystage"),
            Self::StagesDummyPeriodDummystage => String::from("authentik_stages_dummy.dummystage"),
            Self::StagesEmailPeriodEmailstage => String::from("authentik_stages_email.emailstage"),
            Self::StagesIdentificationPeriodIdentificationstage => String::from("authentik_stages_identification.identificationstage"),
            Self::StagesInvitationPeriodInvitationstage => String::from("authentik_stages_invitation.invitationstage"),
            Self::StagesInvitationPeriodInvitation => String::from("authentik_stages_invitation.invitation"),
            Self::StagesPasswordPeriodPasswordstage => String::from("authentik_stages_password.passwordstage"),
            Self::StagesPromptPeriodPrompt => String::from("authentik_stages_prompt.prompt"),
            Self::StagesPromptPeriodPromptstage => String::from("authentik_stages_prompt.promptstage"),
            Self::StagesUserDeletePeriodUserdeletestage => String::from("authentik_stages_user_delete.userdeletestage"),
            Self::StagesUserLoginPeriodUserloginstage => String::from("authentik_stages_user_login.userloginstage"),
            Self::StagesUserLogoutPeriodUserlogoutstage => String::from("authentik_stages_user_logout.userlogoutstage"),
            Self::StagesUserWritePeriodUserwritestage => String::from("authentik_stages_user_write.userwritestage"),
            Self::BrandsPeriodBrand => String::from("authentik_brands.brand"),
            Self::BlueprintsPeriodBlueprintinstance => String::from("authentik_blueprints.blueprintinstance"),
            Self::CorePeriodGroup => String::from("authentik_core.group"),
            Self::CorePeriodUser => String::from("authentik_core.user"),
            Self::CorePeriodApplication => String::from("authentik_core.application"),
            Self::CorePeriodToken => String::from("authentik_core.token"),
            Self::EnterprisePeriodLicense => String::from("authentik_enterprise.license"),
            Self::ProvidersRacPeriodRacprovider => String::from("authentik_providers_rac.racprovider"),
            Self::ProvidersRacPeriodEndpoint => String::from("authentik_providers_rac.endpoint"),
            Self::ProvidersRacPeriodRacpropertymapping => String::from("authentik_providers_rac.racpropertymapping"),
            Self::EventsPeriodEvent => String::from("authentik_events.event"),
            Self::EventsPeriodNotificationtransport => String::from("authentik_events.notificationtransport"),
            Self::EventsPeriodNotification => String::from("authentik_events.notification"),
            Self::EventsPeriodNotificationrule => String::from("authentik_events.notificationrule"),
            Self::EventsPeriodNotificationwebhookmapping => String::from("authentik_events.notificationwebhookmapping"),
        }
    }
}

impl Default for ModelEnum {
    fn default() -> ModelEnum {
        Self::TenantsPeriodDomain
    }
}

